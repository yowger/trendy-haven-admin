// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String   @unique
  role      Role     @default(USER)
  password  String
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Stores    Store[]
}

model Store {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  country     String?
  address     String?
  email       String?
  city        String?
  zipCode     String?
  phoneNumber String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  Products    Product[]
}

model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    String   @db.ObjectId
  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId
  images     Image[]
  Stock      Stock[]
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  Products Product[]
}

model Size {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  value String
  Stock Stock[]
}

model Color {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  Stock Stock[]
}

model Image {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Product    Product  @relation(fields: [productIds], references: [id], onDelete: Cascade)
  productIds String   @db.ObjectId
}

model Stock {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  price     String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  Size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    String  @db.ObjectId
  Color     Color   @relation(fields: [colorId], references: [id])
  colorId   String  @db.ObjectId
}

enum Role {
  USER
  ADMIN
}
